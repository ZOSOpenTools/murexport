diff --git a/backend_inotify.go b/backend_inotify.go
index 44bcbe3..5b6f3f8 100644
--- a/backend_inotify.go
+++ b/backend_inotify.go
@@ -1,5 +1,5 @@
-//go:build linux && !appengine
-// +build linux,!appengine
+//go:build linux && !appengine || zos
+// +build linux,!appengine zos
 
 // Note: the documentation on the Watcher type and methods is generated from
 // mkdoc.zsh
@@ -16,7 +16,7 @@ import (
 	"sync"
 	"unsafe"
 
-	"golang.org/x/sys/unix"
+    "syscall"
 )
 
 // Watcher watches a set of paths, delivering events on a channel.
@@ -246,7 +246,7 @@ func NewWatcher() (*Watcher, error) {
 func NewBufferedWatcher(sz uint) (*Watcher, error) {
 	// Need to set nonblocking mode for SetDeadline to work, otherwise blocking
 	// I/O operations won't terminate on close.
-	fd, errno := unix.InotifyInit1(unix.IN_CLOEXEC | unix.IN_NONBLOCK)
+	fd, errno := syscall.InotifyInit1(syscall.IN_CLOEXEC | syscall.IN_NONBLOCK)
 	if fd == -1 {
 		return nil, errno
 	}
@@ -370,16 +370,16 @@ func (w *Watcher) AddWith(name string, opts ...addOpt) error {
 	name = filepath.Clean(name)
 	_ = getOptions(opts...)
 
-	var flags uint32 = unix.IN_MOVED_TO | unix.IN_MOVED_FROM |
-		unix.IN_CREATE | unix.IN_ATTRIB | unix.IN_MODIFY |
-		unix.IN_MOVE_SELF | unix.IN_DELETE | unix.IN_DELETE_SELF
+	var flags uint32 = syscall.IN_MOVED_TO | syscall.IN_MOVED_FROM |
+		syscall.IN_CREATE | syscall.IN_ATTRIB | syscall.IN_MODIFY |
+		syscall.IN_MOVE_SELF | syscall.IN_DELETE | syscall.IN_DELETE_SELF
 
 	return w.watches.updatePath(name, func(existing *watch) (*watch, error) {
 		if existing != nil {
-			flags |= existing.flags | unix.IN_MASK_ADD
+			flags |= existing.flags | syscall.IN_MASK_ADD
 		}
 
-		wd, err := unix.InotifyAddWatch(w.fd, name, flags)
+		wd, err := syscall.InotifyAddWatch(w.fd, name, flags)
 		if wd == -1 {
 			return nil, err
 		}
@@ -419,7 +419,7 @@ func (w *Watcher) remove(name string) error {
 		return fmt.Errorf("%w: %s", ErrNonExistentWatch, name)
 	}
 
-	success, errno := unix.InotifyRmWatch(w.fd, wd)
+	success, errno := syscall.InotifyRmWatch(w.fd, wd)
 	if success == -1 {
 		// TODO: Perhaps it's not helpful to return an error here in every case;
 		//       The only two possible errors are:
@@ -465,7 +465,7 @@ func (w *Watcher) readEvents() {
 	}()
 
 	var (
-		buf   [unix.SizeofInotifyEvent * 4096]byte // Buffer for a maximum of 4096 raw events
+		buf   [syscall.SizeofInotifyEvent * 4096]byte // Buffer for a maximum of 4096 raw events
 		errno error                                // Syscall errno
 	)
 	for {
@@ -485,7 +485,7 @@ func (w *Watcher) readEvents() {
 			continue
 		}
 
-		if n < unix.SizeofInotifyEvent {
+		if n < syscall.SizeofInotifyEvent {
 			var err error
 			if n == 0 {
 				err = io.EOF // If EOF is received. This should really never happen.
@@ -503,15 +503,15 @@ func (w *Watcher) readEvents() {
 		var offset uint32
 		// We don't know how many events we just read into the buffer
 		// While the offset points to at least one whole event...
-		for offset <= uint32(n-unix.SizeofInotifyEvent) {
+		for offset <= uint32(n-syscall.SizeofInotifyEvent) {
 			var (
 				// Point "raw" to the event in the buffer
-				raw     = (*unix.InotifyEvent)(unsafe.Pointer(&buf[offset]))
+				raw     = (*syscall.InotifyEvent)(unsafe.Pointer(&buf[offset]))
 				mask    = uint32(raw.Mask)
 				nameLen = uint32(raw.Len)
 			)
 
-			if mask&unix.IN_Q_OVERFLOW != 0 {
+			if mask&syscall.IN_Q_OVERFLOW != 0 {
 				if !w.sendError(ErrEventOverflow) {
 					return
 				}
@@ -525,13 +525,13 @@ func (w *Watcher) readEvents() {
 
 			// inotify will automatically remove the watch on deletes; just need
 			// to clean our state here.
-			if watch != nil && mask&unix.IN_DELETE_SELF == unix.IN_DELETE_SELF {
+			if watch != nil && mask&syscall.IN_DELETE_SELF == syscall.IN_DELETE_SELF {
 				w.watches.remove(watch.wd)
 			}
 			// We can't really update the state when a watched path is moved;
 			// only IN_MOVE_SELF is sent and not IN_MOVED_{FROM,TO}. So remove
 			// the watch.
-			if watch != nil && mask&unix.IN_MOVE_SELF == unix.IN_MOVE_SELF {
+			if watch != nil && mask&syscall.IN_MOVE_SELF == syscall.IN_MOVE_SELF {
 				err := w.remove(watch.path)
 				if err != nil && !errors.Is(err, ErrNonExistentWatch) {
 					if !w.sendError(err) {
@@ -546,7 +546,7 @@ func (w *Watcher) readEvents() {
 			}
 			if nameLen > 0 {
 				// Point "bytes" at the first byte of the filename
-				bytes := (*[unix.PathMax]byte)(unsafe.Pointer(&buf[offset+unix.SizeofInotifyEvent]))[:nameLen:nameLen]
+				bytes := (*[syscall.PathMax]byte)(unsafe.Pointer(&buf[offset+syscall.SizeofInotifyEvent]))[:nameLen:nameLen]
 				// The filename is padded with NULL bytes. TrimRight() gets rid of those.
 				name += "/" + strings.TrimRight(string(bytes[0:nameLen]), "\000")
 			}
@@ -554,14 +554,14 @@ func (w *Watcher) readEvents() {
 			event := w.newEvent(name, mask)
 
 			// Send the events that are not ignored on the events channel
-			if mask&unix.IN_IGNORED == 0 {
+			if mask&syscall.IN_IGNORED == 0 {
 				if !w.sendEvent(event) {
 					return
 				}
 			}
 
 			// Move to the next event in the buffer
-			offset += unix.SizeofInotifyEvent + nameLen
+			offset += syscall.SizeofInotifyEvent + nameLen
 		}
 	}
 }
@@ -569,19 +569,19 @@ func (w *Watcher) readEvents() {
 // newEvent returns an platform-independent Event based on an inotify mask.
 func (w *Watcher) newEvent(name string, mask uint32) Event {
 	e := Event{Name: name}
-	if mask&unix.IN_CREATE == unix.IN_CREATE || mask&unix.IN_MOVED_TO == unix.IN_MOVED_TO {
+	if mask&syscall.IN_CREATE == syscall.IN_CREATE || mask&syscall.IN_MOVED_TO == syscall.IN_MOVED_TO {
 		e.Op |= Create
 	}
-	if mask&unix.IN_DELETE_SELF == unix.IN_DELETE_SELF || mask&unix.IN_DELETE == unix.IN_DELETE {
+	if mask&syscall.IN_DELETE_SELF == syscall.IN_DELETE_SELF || mask&syscall.IN_DELETE == syscall.IN_DELETE {
 		e.Op |= Remove
 	}
-	if mask&unix.IN_MODIFY == unix.IN_MODIFY {
+	if mask&syscall.IN_MODIFY == syscall.IN_MODIFY {
 		e.Op |= Write
 	}
-	if mask&unix.IN_MOVE_SELF == unix.IN_MOVE_SELF || mask&unix.IN_MOVED_FROM == unix.IN_MOVED_FROM {
+	if mask&syscall.IN_MOVE_SELF == syscall.IN_MOVE_SELF || mask&syscall.IN_MOVED_FROM == syscall.IN_MOVED_FROM {
 		e.Op |= Rename
 	}
-	if mask&unix.IN_ATTRIB == unix.IN_ATTRIB {
+	if mask&syscall.IN_ATTRIB == syscall.IN_ATTRIB {
 		e.Op |= Chmod
 	}
 	return e
diff --git a/backend_other.go b/backend_other.go
index 263fa12..92640a9 100644
--- a/backend_other.go
+++ b/backend_other.go
@@ -1,5 +1,5 @@
-//go:build appengine || (!darwin && !dragonfly && !freebsd && !openbsd && !linux && !netbsd && !solaris && !windows)
-// +build appengine !darwin,!dragonfly,!freebsd,!openbsd,!linux,!netbsd,!solaris,!windows
+//go:build appengine || (!darwin && !dragonfly && !freebsd && !openbsd && !linux && !netbsd && !solaris && !windows && !zos)
+// +build appengine !darwin,!dragonfly,!freebsd,!openbsd,!linux,!netbsd,!solaris,!windows,!zos
 
 // Note: the documentation on the Watcher type and methods is generated from
 // mkdoc.zsh
diff --git a/internal/debug_zos.go b/internal/debug_zos.go
new file mode 100644
index 0000000..61900ab
--- /dev/null
+++ b/internal/debug_zos.go
@@ -0,0 +1,63 @@
+package internal
+
+import (
+	"fmt"
+	"os"
+	"strings"
+	"time"
+
+    "syscall"
+)
+
+func Debug(name string, mask uint32) {
+	names := []struct {
+		n string
+		m uint32
+	}{
+		{"IN_ACCESS", syscall.IN_ACCESS},
+		{"IN_ALL_EVENTS", syscall.IN_ALL_EVENTS},
+		{"IN_ATTRIB", syscall.IN_ATTRIB},
+		{"IN_CLASSA_HOST", syscall.IN_CLASSA_HOST},
+		{"IN_CLASSA_MAX", syscall.IN_CLASSA_MAX},
+		{"IN_CLASSA_NET", syscall.IN_CLASSA_NET},
+		{"IN_CLASSA_NSHIFT", syscall.IN_CLASSA_NSHIFT},
+		{"IN_CLASSB_HOST", syscall.IN_CLASSB_HOST},
+		{"IN_CLASSB_MAX", syscall.IN_CLASSB_MAX},
+		{"IN_CLASSB_NET", syscall.IN_CLASSB_NET},
+		{"IN_CLASSB_NSHIFT", syscall.IN_CLASSB_NSHIFT},
+		{"IN_CLASSC_HOST", syscall.IN_CLASSC_HOST},
+		{"IN_CLASSC_NET", syscall.IN_CLASSC_NET},
+		{"IN_CLASSC_NSHIFT", syscall.IN_CLASSC_NSHIFT},
+		{"IN_CLOSE", syscall.IN_CLOSE},
+		{"IN_CLOSE_NOWRITE", syscall.IN_CLOSE_NOWRITE},
+		{"IN_CLOSE_WRITE", syscall.IN_CLOSE_WRITE},
+		{"IN_CREATE", syscall.IN_CREATE},
+		{"IN_DELETE", syscall.IN_DELETE},
+		{"IN_DELETE_SELF", syscall.IN_DELETE_SELF},
+		{"IN_DONT_FOLLOW", syscall.IN_DONT_FOLLOW},
+		{"IN_EXCL_UNLINK", syscall.IN_EXCL_UNLINK},
+		{"IN_IGNORED", syscall.IN_IGNORED},
+		{"IN_ISDIR", syscall.IN_ISDIR},
+		{"IN_LOOPBACKNET", syscall.IN_LOOPBACKNET},
+		{"IN_MASK_ADD", syscall.IN_MASK_ADD},
+		{"IN_MASK_CREATE", syscall.IN_MASK_CREATE},
+		{"IN_MODIFY", syscall.IN_MODIFY},
+		{"IN_MOVE", syscall.IN_MOVE},
+		{"IN_MOVED_FROM", syscall.IN_MOVED_FROM},
+		{"IN_MOVED_TO", syscall.IN_MOVED_TO},
+		{"IN_MOVE_SELF", syscall.IN_MOVE_SELF},
+		{"IN_ONESHOT", syscall.IN_ONESHOT},
+		{"IN_ONLYDIR", syscall.IN_ONLYDIR},
+		{"IN_OPEN", syscall.IN_OPEN},
+		{"IN_Q_OVERFLOW", syscall.IN_Q_OVERFLOW},
+		{"IN_UNMOUNT", syscall.IN_UNMOUNT},
+	}
+
+	var l []string
+	for _, n := range names {
+		if mask&n.m == n.m {
+			l = append(l, n.n)
+		}
+	}
+	fmt.Fprintf(os.Stderr, "%s  %-20s â†’ %s\n", time.Now().Format("15:04:05.0000"), strings.Join(l, " | "), name)
+}
